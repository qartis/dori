#include <ctype.h>
#include <avr/io.h>
#include <stdlib.h>
#include <util/delay.h>
#include <stdint.h>
#include <avr/interrupt.h>
#include <stdio.h>
#include <string.h>

#include "uart.h"

volatile struct {
    uint8_t received : 1;
    uint8_t ok : 1;
    uint8_t error : 1;
    uint8_t nocarrier : 1;
    uint8_t connect : 1;
    uint8_t ignore : 1;
} flags;

volatile uint16_t http_status;
volatile uint16_t http_len;

int attempt = 0;
int success = 0;

inline int streq(const char *a, const char *b){
    return strcmp(a,b) == 0;
}

volatile uint8_t payload[512];
volatile uint8_t payload_len;

volatile enum {
    MODE_AT,
    MODE_HTTP,
    MODE_PAYLOAD
} mode = MODE_AT;

ISR(USART_RX_vect)
{
    uint8_t c;
    char *ptr;
    static uint16_t payload_remain = 0;
    static char rxbuf[128];
    static uint8_t rxcount = 0;

    c = UDR0;

    flags.received = 1;

    if (mode == MODE_PAYLOAD) {
        if (http_status == 200) {
            payload[payload_len] = c;
    //        debug("X%d:%x\n", payload_len, c);
            payload_len++;
        }
        payload_remain--;
        if (payload_remain == 0) {
            //debug("payload done\n");
            mode = MODE_AT;
            payload[payload_len] = '\0';
        }
        return;
    }

    if (flags.ignore)
        return;

    if (c == '\r') {
        rxbuf[rxcount] = '\0';
        if (streq(rxbuf, "OK")) {
            flags.ok = 1;
        } else if (streq(rxbuf, "ERROR")) {
            flags.error = 1;
        } else if (streq(rxbuf, "NO CARRIER")) {
            flags.nocarrier = 1;
        } else if (streq(rxbuf, "CONNECT")) {
            flags.connect = 1;
        } else if (strncmp(rxbuf, "HTTP", 4) == 0) {
            ptr = rxbuf + strlen("HTTP/1.0 ");
            http_status = atoi(ptr);
     //       debug("stat: %d\n", http_status);
            mode = MODE_HTTP;
            payload_len = 0;
        } else if (mode == MODE_HTTP && strncasecmp(rxbuf, "Content-length: ", strlen("Content-Length: ")) == 0) {
            ptr = rxbuf + strlen("Content-length: ");
            http_len = atoi(ptr);
            payload_remain = http_len + 1;
      //      debug("len: %d\n", http_len);
        } else if (mode == MODE_HTTP && http_len > 0 && rxcount == 0) {
       //     debug("rcv payload..\n", payload_remain);
            mode = MODE_PAYLOAD;
            payload_len = 0;
        } else if (rxcount > 0 && http_status == 0) {
            //debug("wtf cmd: '%s'\n", rxbuf);
        }
        rxcount = 0;
        rxbuf[0] = '\0';
    } else if (c != '\n' && c != '\0') {
        rxbuf[rxcount] = c;
        rxcount++;
    }
}

void slow_write(const char *buf)
{
    uint8_t i;

    flags.ok = 0;
    flags.error = 0;
    flags.nocarrier = 0;
    flags.connect = 0;
    http_status = 0;

    for (i = 0; i < strlen(buf); i++) {
        uart_putchar(buf[i]);
        _delay_us(1000);
    }
}

void find_modem(void)
{
    puts("looking for modem..");

    for (;;) {
        puts(".");

        cli();
        mode = MODE_AT;
        _delay_ms(1200);
        slow_write("+++");
        _delay_ms(3000);
        sei();

        flags.ignore = 0;

        slow_write("ATE0\r");
        _delay_ms(500);

        if (flags.ok) {
            slow_write("AT+CGDCONT=1,\"IP\",\"goam.com\",,\r");
            _delay_ms(10);

            slow_write("AT%CGPCO=1,\"PAP,wapuser1,wap\",2\r");
            _delay_ms(10);

            slow_write("AT$DESTINFO=\"10.128.1.69\",1,80,0\r");
            _delay_ms(100);

            break;
        }
    }

    puts("found!\n");
}

uint8_t upload(void)
{
    uint8_t i;
    uint8_t retry;

    slow_write("ATD*97#\r");
    _delay_ms(750);

    retry = 255;
    while (!flags.ok && --retry)
        _delay_ms(50);

    if (!flags.ok)
        return 1;

    _delay_ms(300);

    if (!flags.ok || flags.error || flags.nocarrier || flags.connect)
        return 2;

    mode = MODE_HTTP;

    slow_write(
        "POST http://h.qartis.com/dori/hey HTTP/1.0\r\n"
        "Host: h.qartis.com\r\n"
        "Expect: 100-continue\r\n"
        "Content-length: 5\r\n\r\n");

    for (i = 0; i < 5; i++) {
        if (flags.received)
            return 5;

        uart_putchar('A' + i);
        _delay_us(1000);
    }

    retry = 255;
    while (mode != MODE_AT && --retry)
        _delay_ms(50);

    if (retry == 0)
        return 3;
    else if (http_status != 200)
        return 4;

    return 0;
}
